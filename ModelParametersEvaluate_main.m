% ======================================================================== %
% This code evaluate the parameters of the subject who generated the
% "experiment motion" by seeing if a matched trajectory is able to be
% generated by the trajectory optimization progress with the parameters set.
% The OpenSim-Matlab interface used in the optimization progress is adapted
% from Brian Umberger & Leng-Feng Lee's work in 2015, form UMass Amherst.
%
% Author: Yu-Fan Chien, NTU.
% ======================================================================== %
% Using the TOW.osim model as the example
clear
clc

% ----- LOAD EXPERIMENT DATA FILES (.mot or .sto)  批次載入目標軌跡 ------------------------%
folder=dir('M5rr_m1big_*.sto'); % 抓取副檔名為.sto且後面有相同固定形式的檔案
n_traj = length(folder); % numbers of the desired referancing motions 
for i = 1:n_traj  % LOAD MEASURMENT FILES (.mot or .sto)
    % -- select the files manually 手動選取 --%
%     [q_measured_time(:,i), q_measured_data(:,i), q_measured_text(:,i)] = inportData(5);            
    % -- read in batch file 批次讀檔 --%
    filename = string(folder(i,1).name); 
    temp = importdata(filename);
    q_measured_time(:,i) = temp.data(:,1); 
    q_measured_data(:,i) = temp.data(:,2:end);
end
% -----Initialize--------------------------------------------------------%
import org.opensim.modeling.* % Import the OpenSim modeling classes
n_node = 25;                % # of nodal points
duration = q_measured_time(end,1)-q_measured_time(1,1);  % time in sec to complete task
model = Model('TOW.osim'); % Read in the osim model
stateIdx_of_coord = 1; % index of coordinates in the state file

% get some necessary parameters
h           = duration/(n_node-1);     % time interval between nodes
dc_time     = h*(0:n_node-1)';   % list of time points (temporal grid)
osimState   = model.initSystem(); % Initialize the model (builds the system and initialize the stat
muscle      = model.getMuscles();
n_state      = model.getNumStateVariables();
n_control    = model.getNumControls();
n_coord      = model.getNumCoordinates(); %  coupled type is included
n_muscle     = muscle.getSize();

% Get the names of the states from the model
states_name = cell(n_state,1);
for i = 1:n_state
   states_name(i,1) = cell(model.getStateVariableNames().getitem(i-1));
end

% Get the names of the controls/muscles from the model (same in this case)
controls_name = cell(n_control,1);
for i = 1:n_control
   currentMuscle = muscle.get(i-1);
   controls_name(i,1) = cell(currentMuscle.getName());
end

% ----- Data to be passed to functions -----------------------------------%
auxdata.model            = model;
auxdata.muscle           =  muscle;
auxdata.time             = dc_time;
auxdata.h                = h;
auxdata.n_node           = n_node;
auxdata.n_state          = n_state;
auxdata.n_control        = n_control;
auxdata.n_coord          = n_coord;
auxdata.n_muscle         = n_muscle;
auxdata.stateIdx_of_coord   = stateIdx_of_coord;

% Trajectiory matrix [motion1, motion2, ... motion_
Traj = zeros(n_node, n_traj);  % pre-allocate spacen_traj
for i = 1: n_traj
    Traj(:,i) = interp1(q_measured_time(:,i),q_measured_data(:,i),dc_time); % interpolate trajectory to the defined temporal grid
end
Traj_dot = [zeros(1,n_traj); diff(Traj)/h];

% ----- Load the initial guess for the state and control -----------------%
temp = importdata('TOW_initState_220313-1729.sto');
s_old_time = temp.data(:,1);    s_old_data = temp.data(:,2:end);
temp = importdata('TOW_initControl_220313-1729.sto');
c_old_time = temp.data(:,1);    c_old_data = temp.data(:,2:end);

% Arrange the initial guess by nodes and states
x0_temp = zeros(n_node, n_state);  % pre-allocate space
for j = 1:n_state
    x0_temp(:,j) = interp1(s_old_time,s_old_data(:,j),dc_time,'linear','extrap'); % interpolate initial guess to the defined temporal grid
end
u0_temp = zeros(n_node, n_control);
for j = 1 : n_control
    u0_temp(:,j) = interp1(c_old_time,c_old_data(:,j),dc_time,'linear','extrap'); % interpolate to the temporal grid
end


%  intital guess of model parameters
P0 = ones(n_muscle,3); P = ones(n_muscle,3);
% Muscle Parameters metrix:
%  [mus1 maxisometric force , mus1 opt length , mus1 tendon slack length ;
%   mus2 maxisometric force , mus2 opt length , mus2 tendon slack length ]

for i = 1: n_muscle
    P(i,1) = muscle.get(i-1).getMaxIsometricForce();
    P(i,2) = muscle.get(i-1).getOptimalFiberLength();
    P(i,3) = muscle.get(i-1).getTendonSlackLength();
end

%  Traj opt. boundary setting
Pos_LB = -0.2;       Pos_UB = 0.2;
Vel_LB = -10;         Vel_UB = 10;
Act_LB(1:n_muscle) = 0.011;    Act_UB(1:n_muscle) = 0.999; % same as model xml
Fib_LB(1:n_muscle) = 0.011;    Fib_UB(1:n_muscle) = 0.999; % same as model xml
Con_LB(1:n_muscle) = 0.011;    Con_UB(1:n_muscle) = 0.999;

% Arrange in alternate manner
for i = 1:n_coord
    Pos_Vel_Lb(2*(i-1)+1:2*(i)) = [Pos_LB((i-1)+1:(i)) Vel_LB((i-1)+1:(i))];
    Pos_Vel_Ub(2*(i-1)+1:2*(i)) = [Pos_UB((i-1)+1:(i)) Vel_UB((i-1)+1:(i))];
end
for i = 1:n_muscle 
    Act_Fib_LB(2*(i-1)+1:2*(i)) = [Act_LB((i-1)+1:(i)) Fib_LB((i-1)+1:(i))];
    Act_Fib_UB(2*(i-1)+1:2*(i)) = [Act_UB((i-1)+1:(i)) Fib_UB((i-1)+1:(i))];
end

opt_traj_lb = [Pos_Vel_Lb Act_Fib_LB Con_LB]';
opt_traj_ub = [Pos_Vel_Ub Act_Fib_UB Con_UB]';

bounds.lb_a = [ opt_traj_lb(1:n_state); opt_traj_lb];
bounds.ub_a = [ opt_traj_ub(1:n_state); opt_traj_ub];
bounds.lb_b = opt_traj_lb;
bounds.ub_b = opt_traj_ub;

% get parameters samples
tic ; start_time =  datestr(now, 'mmdd-HHMM');
n_samp = 600;  gap = 5;
f_motion_errpr = zeros(n_samp,n_traj); f = zeros(n_samp,1);
lb = P*0.75;         ub = P*1.25;  %取樣上下界

p = sobolset(6);
sample = p(2:gap:n_samp*gap+2,:);
P_sample = zeros(n_samp, 6); 
lb = [lb(1,:),lb(2,:)];  ub = [ub(1,:),ub(2,:)]; %重新排列
range = ub-lb;

% calculate the error of rebuilded traj.
for i = 497:n_samp
    P_sample(i,:) = lb + round(sample(i,:).*range,4);
    P_x = [P_sample(i,1:3);P_sample(i,4:6)];
    f_motion_error(i,:)= TrajOpt(P_x,auxdata, Traj, x0_temp, u0_temp, bounds);
    disp([num2str(i),'th sample done.']);
end
% runtime = toc;

